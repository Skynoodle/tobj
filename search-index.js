var N = null;var searchIndex = {};
searchIndex["tobj"]={"doc":"Tiny OBJ loader, inspired by Syoyo's excellent tinyobjloader. Aims to be a simple and lightweight option for loading OBJ files, just returns two vecs containing loaded models and materials. All models are made of triangles, any quad or polygon faces in an OBJ file will be converted to triangles. Note that only polygons that are trivially convertible to triangle fans are supported, arbitrary polygons may not behave as expected. The best solution would be to re-export your mesh using only triangles in your modeling software.","items":[[3,"Mesh","tobj","A mesh made up of triangles loaded from some OBJ file",N,N],[12,"positions","","Flattened 3 component floating point vectors, storing positions of vertices in the mesh",0,N],[12,"normals","","Flattened 3 component floating point vectors, storing normals of vertices in the mesh. Not all meshes have normals, if no normals are specified this Vec will be empty",0,N],[12,"texcoords","","Flattened 2 component floating point vectors, storing texture coordinates of vertices in the mesh. Not all meshes have normals, if no texture coordinates are specified this Vec will be empty",0,N],[12,"indices","","Indices for vertices of each triangle. Each face in the mesh is a triangle and the indices specify the position, normal and texture coordinate for each vertex of the face.",0,N],[12,"material_id","","Optional material id associated with this mesh. The material id indexes into the Vec of Materials loaded from the associated MTL file",0,N],[3,"Model","","A named model within the file, associates some mesh with a name that was specified with an `o` or `g` keyword in the OBJ file",N,N],[12,"mesh","","Mesh used by the model containing its geometry",1,N],[12,"name","","Name assigned to this mesh",1,N],[3,"Material","","A material that may be referenced by one or more meshes. Standard MTL attributes are supported. Any unrecognized parameters will be stored as key-value pairs in the `unknown_param` `HashMap`, which maps the unknown parameter to the value set for it.",N,N],[12,"name","","Material name as specified in the MTL file",2,N],[12,"ambient","","Ambient color of the material",2,N],[12,"diffuse","","Diffuse color of the material",2,N],[12,"specular","","Specular color of the material",2,N],[12,"shininess","","Material shininess attribute",2,N],[12,"dissolve","","Dissolve attribute is the alpha term for the material. Referred to as dissolve since that's what the MTL file format docs refer to it as",2,N],[12,"optical_density","","Optical density also known as index of refraction. Called optical_density in the MTL specc. Takes on a value between 0.001 and 10.0. 1.0 means light does not bend as it passed through the object.",2,N],[12,"ambient_texture","","Name of the ambient texture file for the material. No path is pre-pended to the texture file names specified in the MTL file",2,N],[12,"diffuse_texture","","Name of the diffuse texture file for the material. No path is pre-pended to the texture file names specified in the MTL file",2,N],[12,"specular_texture","","Name of the specular texture file for the material. No path is pre-pended to the texture file names specified in the MTL file",2,N],[12,"normal_texture","","Name of the normal map texture file for the material. No path is pre-pended to the texture file names specified in the MTL file",2,N],[12,"dissolve_texture","","Name of the alpha map texture file for the material. No path is pre-pended to the texture file names specified in the MTL file. Referred to as dissolve to match the MTL file format specification",2,N],[12,"illumination_model","","The illumnination model to use for this material. The different illumnination models are specified in http://paulbourke.net/dataformats/mtl/",2,N],[12,"unknown_param","","Key value pairs of any unrecognized parameters encountered while parsing the material",2,N],[4,"LoadError","","Possible errors that may occur while loading OBJ and MTL files",N,N],[13,"OpenFileFailed","","",3,N],[13,"ReadError","","",3,N],[13,"UnrecognizedCharacter","","",3,N],[13,"PositionParseError","","",3,N],[13,"NormalParseError","","",3,N],[13,"TexcoordParseError","","",3,N],[13,"FaceParseError","","",3,N],[13,"MaterialParseError","","",3,N],[13,"InvalidObjectName","","",3,N],[13,"GenericFailure","","",3,N],[5,"load_obj","","Load the various objects specified in the OBJ file and any associated MTL file Returns a pair of Vecs containing the loaded models and materials from the file.",N,[[["path"]],["loadresult"]]],[5,"load_mtl","","Load the materials defined in a MTL file Returns a pair with a `Vec` holding all loaded materials and a `HashMap` containing a mapping of material names to indices in the Vec.",N,[[["path"]],["mtlloadresult"]]],[5,"load_obj_buf","","Load the various meshes in an OBJ buffer of some kind, e.g. a network stream, text file already in memory or so on.",N,[[["b"],["ml"]],["loadresult"]]],[5,"load_mtl_buf","","Load the various materials in a MTL buffer",N,[[["b"]],["mtlloadresult"]]],[5,"print_model_info","","Print out all loaded properties of some models and associated materials",N,N],[5,"print_material_info","","Print out all loaded properties of some materials",N,N],[6,"LoadResult","","`LoadResult` is a result containing all the models loaded from the file and any materials from referenced material libraries, or an error that occured while loading",N,N],[6,"MTLLoadResult","","`MTLLoadResult` is a result containing all the materials loaded from the file and a map of MTL name to index or the error that occured while loading",N,N],[11,"new","","Create a new mesh specifying the geometry for the mesh",0,[[["vec",["f32"]],["vec",["f32"]],["vec",["f32"]],["vec",["u32"]],["option",["usize"]]],["mesh"]]],[11,"empty","","Create a new empty mesh",0,[[],["mesh"]]],[11,"new","","Create a new model, associating a name with a mesh",1,[[["mesh"],["string"]],["model"]]],[11,"empty","","",2,[[],["material"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_string","","",3,[[["self"]],["string"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"clone","","",0,[[["self"]],["mesh"]]],[11,"clone","","",1,[[["self"]],["model"]]],[11,"clone","","",2,[[["self"]],["material"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"description","","",3,[[["self"]],["str"]]]],"paths":[[3,"Mesh"],[3,"Model"],[3,"Material"],[4,"LoadError"]]};
initSearch(searchIndex);
